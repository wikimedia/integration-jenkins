#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
git-changed-in-head : list changed files in HEAD matching a file extension

This script list any added, copied or modified file in the current directory
and filters out by extension.

The current directory must be a git repository.

USAGE:
 git-changed-in-head [extension..]

EXAMPLE:

 List files ending with .php, .php5 or .inc
   git-changed-in-head php php5 inc

 List any file changed (no filtering):
  git-changed-in-head


Copyright © 2013, Antoine Musso
Copyright © 2013, Wikimedia Foundation Inc.
Copyright © 2017, Kunal Mehta

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
"""

import subprocess
import sys

PATH_ARGS = []
for arg in sys.argv[1:]:
    # Put a dot in front for file extensions
    PATH_ARGS.append('.{}'.format(arg))

# Some explanations for the git command below:
# HEAD^ will not exist for an initial commit, we thus need `git show`
# --name-only : strip the patch payload, only report the file being altered
# --diff-filter=ACM : only care about files Added, Copied or Modified
# -m : show differences for merge commits ...
# --first-parent : ... but only follow the first parent commit
# --format=format: : strip out the commit summary
cmd = [
    'git', 'show', 'HEAD',
    '--name-only',
    '--diff-filter=ACM',
    '-m',
    '--first-parent',
    '--format=format:',
]
# print(' '.join(cmd))
out = subprocess.check_output(cmd).decode()
for line in out.splitlines():
    # If matching on file extensions, filter that out
    if PATH_ARGS and not line.endswith(tuple(PATH_ARGS)):
        continue
    print(line)
